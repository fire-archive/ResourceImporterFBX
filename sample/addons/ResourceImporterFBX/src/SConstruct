#!python
import os

env = Environment()

if ARGUMENTS.get("platform"):
  platform = ARGUMENTS.get("platform")

if ARGUMENTS.get("p"):
  platform = ARGUMENTS.get("p")

def add_sources(sources, dir):
    for f in os.listdir(dir):
        if f.endswith(".cpp"):
            sources.append(dir + "/" + f)

if platform == "linux":
    if ARGUMENTS.get("use_llvm", "no") == "yes":
        env["CXX"] = "clang++"
    env.Append(CCFLAGS = ['-g','-O3', '-std=c++14', '-Wno-writable-strings'])
    env.Append(LINKFLAGS = ['-Wl,-R,\'$$ORIGIN\''])
    env.Append(CPPPATH=['/usr/include/godot/', '/usr/include/godot/godot_cpp/', '/usr/include/godot/godot_cpp/core'])
    env.Append(LIBS=['godot_cpp_core', 'godot_cpp_bindings'])
    env.Append(LIBPATH=["../lib"])

if platform == "windows":
    env.Append(CPPPATH=[ '../godot_headers/', '../../FBX SDK/2018.1.1/include/', '../cpp_bindings/include/', '../cpp_bindings/include/core/'])
    env.Append(LIBS=['godot_fork/bin/godot.windows.tools.64', 'cpp_bindings/bin/godot_cpp_core', 'cpp_bindings/bin/godot_cpp_bindings', '../FBX SDK/2018.1.1/lib/vs2015/x64/release/libfbxsdk']) 

sources = ["ResourceImporterFBX.cpp"]

def AddToVSProject(sources):
    for x in sources:
        if type(x) == type(""):
            fname = env.File(x).path
        else:
            fname = env.File(x)[0].path
        pieces = fname.split(".")
        if len(pieces) > 0:
            basename = pieces[0]
            basename = basename.replace('\\\\', '/')
            env.vs_srcs = env.vs_srcs + [basename + ".cpp"]
            env.vs_incs = env.vs_incs + [basename + ".h"]
            # print basename

if platform == "linux":
    library = env.SharedLibrary(target='../sample/addons/ResourceImporterFBX/lib/ResourceImporterFBX', source=sources)
    Default(library)

if platform == "windows":
    env.vs_incs = []
    env.vs_srcs = []
    env.AddToVSProject = AddToVSProject

    # Microsoft Visual Studio Project Generation
    AddToVSProject(sources)

    # Calls a CMD with /C(lose) and /V(delayed environment variable expansion) options.
    # And runs vcvarsall bat for the proper architecture and scons for proper configuration
    env['MSVSBUILDCOM'] = 'cmd /V /C set "plat=$(PlatformTarget)" ^& (if "$(PlatformTarget)"=="x64" (set "plat=x86_amd64")) ^& set "tools=yes" ^& (if "$(Configuration)"=="release" (set "tools=no")) ^& call "$(VCInstallDir)vcvarsall.bat" !plat! ^& scons platform=windows target=$(Configuration) tools=!tools! -j2'
    env['MSVSREBUILDCOM'] = 'cmd /V /C set "plat=$(PlatformTarget)" ^& (if "$(PlatformTarget)"=="x64" (set "plat=x86_amd64")) ^& set "tools=yes" ^& (if "$(Configuration)"=="release" (set "tools=no")) & call "$(VCInstallDir)vcvarsall.bat" !plat! ^& scons platform=windows target=$(Configuration) tools=!tools! vsproj=yes -j2'
    env['MSVSCLEANCOM'] = 'cmd /V /C set "plat=$(PlatformTarget)" ^& (if "$(PlatformTarget)"=="x64" (set "plat=x86_amd64")) ^& set "tools=yes" ^& (if "$(Configuration)"=="release" (set "tools=no")) ^& call "$(VCInstallDir)vcvarsall.bat" !plat! ^& scons --clean platform=windows target=$(Configuration) tools=!tools! -j2'

    # This version information (Win32, x64, Debug, Release, Release_Debug seems to be
    # required for Visual Studio to understand that it needs to generate an NMAKE
    # project. Do not modify without knowing what you are doing.
    debug_variants = ['debug|Win32'] + ['debug|x64']
    release_variants = ['release|Win32'] + ['release|x64']
    release_debug_variants = ['release_debug|Win32'] + ['release_debug|x64']
    variants = debug_variants + release_variants + release_debug_variants
    debug_targets = ['..\\..\\..\\..\\godot_fork\\bin\\godot.windows.tools.32.exe'] + ['..\\..\\..\\..\\godot_fork\\bin\\godot.windows.tools.64.exe']
    release_targets = ['..\\..\\..\\..\godot_fork\\bin\\godot.windows.opt.32.exe'] + ['..\\..\\..\\..\\godot_fork\\bin\\godot.windows.opt.64.exe']
    release_debug_targets = ['..\\..\\..\\..\godot_fork\\bin\\godot.windows.opt.tools.32.exe'] + ['..\\..\\..\\..\\godot_fork\\bin\\godot.windows.opt.tools.64.exe']
    targets = debug_targets + release_targets + release_debug_targets
    msvproj = env.MSVSProject(target=['ResourceImporterFBX' + env['MSVSPROJECTSUFFIX']],
                                incs=env.vs_incs,
                                srcs=env.vs_srcs,
                                runfile=targets,
                                buildtarget=targets,
                                auto_build_solution=1,
                                variant=variants)
    Default(msvproj)